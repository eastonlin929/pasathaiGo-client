{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport QAService from \"../services/QA-service\";\n\n//取得所有訊息\nexport function useGetMessages() {\n  _s();\n  return useQuery([\"messages\"], QAService.getMessages);\n}\n//取得特定URL的訊息\n_s(useGetMessages, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport function useGetURLMessage(_id, isId) {\n  _s2();\n  return useQuery({\n    queryKey: [\"readMessages\", _id],\n    queryFn: async () => {\n      const data = await QAService.getURLMessage(_id);\n      return data;\n    },\n    enabled: isId\n  });\n}\n//取得使用者的訊息\n_s2(useGetURLMessage, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport function useGetUserMessages(user_id, isId) {\n  _s3();\n  return useQuery({\n    queryKey: [\"userMessages\", user_id],\n    queryFn: async () => {\n      const data = await QAService.getUserMessages(user_id);\n      return data;\n    },\n    enabled: isId\n  });\n}\n//發布問題\n_s3(useGetUserMessages, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport function usePostMessage() {\n  _s4();\n  const queryClient = useQueryClient();\n  const postMessageMutation = useMutation(data => {\n    return QAService.postMessage(data.title, data.content);\n  }, {\n    onSuccess: data => {\n      console.log(data);\n      queryClient.setQueryData([\"messages\", data._id], data);\n      queryClient.invalidateQueries([\"messages\"], {\n        exact: true\n      });\n    }\n  });\n  return postMessageMutation;\n}\n//發布回答\n_s4(usePostMessage, \"hOioQ06xXZu2BxKGewNs9trrjjU=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport function usePostReply() {\n  _s5();\n  const queryClient = useQueryClient();\n  const postReplyMutation = useMutation(data => QAService.postReply(data._id, data.content), {\n    onSuccess: data => {\n      queryClient.setQueryData([\"readMessages\", data.id], data);\n      queryClient.invalidateQueries([\"readMessages\"]);\n    }\n  });\n  return postReplyMutation;\n}\n//刪除留言or回覆\n_s5(usePostReply, \"dNfEqvVh2ha+1lNTrtFKVbucz8w=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport function useDeleteMsg() {\n  _s6();\n  const queryClient = useQueryClient();\n  const deleteMsgMutation = useMutation(data => QAService.deleteMessage(data._id), {\n    onSuccess: data => {\n      queryClient.invalidateQueries([\"messages\"]);\n    }\n  });\n  return deleteMsgMutation;\n}\n_s6(useDeleteMsg, \"kuMoHR/I0Mtytx1DlzfJzTX0oKI=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","QAService","useGetMessages","_s","getMessages","useGetURLMessage","_id","isId","_s2","queryKey","queryFn","data","getURLMessage","enabled","useGetUserMessages","user_id","_s3","getUserMessages","usePostMessage","_s4","queryClient","postMessageMutation","postMessage","title","content","onSuccess","console","log","setQueryData","invalidateQueries","exact","usePostReply","_s5","postReplyMutation","postReply","id","useDeleteMsg","_s6","deleteMsgMutation","deleteMessage"],"sources":["/Users/linyicheng/Desktop/Desktop/desktopCloud/web-design/作品集練習/pasathaigo-client/client/src/customHooks/qaApi.js"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport QAService from \"../services/QA-service\";\n\n//取得所有訊息\nexport function useGetMessages() {\n  return useQuery([\"messages\"], QAService.getMessages);\n}\n//取得特定URL的訊息\nexport function useGetURLMessage(_id, isId) {\n  return useQuery({\n    queryKey: [\"readMessages\", _id],\n    queryFn: async () => {\n      const data = await QAService.getURLMessage(_id);\n      return data;\n    },\n    enabled: isId,\n  });\n}\n//取得使用者的訊息\nexport function useGetUserMessages(user_id, isId) {\n  return useQuery({\n    queryKey: [\"userMessages\", user_id],\n    queryFn: async () => {\n      const data = await QAService.getUserMessages(user_id);\n      return data;\n    },\n    enabled: isId,\n  });\n}\n//發布問題\nexport function usePostMessage() {\n  const queryClient = useQueryClient();\n  const postMessageMutation = useMutation(\n    (data) => {\n      return QAService.postMessage(data.title, data.content);\n    },\n    {\n      onSuccess: (data) => {\n        console.log(data);\n        queryClient.setQueryData([\"messages\", data._id], data);\n        queryClient.invalidateQueries([\"messages\"], { exact: true });\n      },\n    }\n  );\n  return postMessageMutation;\n}\n//發布回答\nexport function usePostReply() {\n  const queryClient = useQueryClient();\n  const postReplyMutation = useMutation(\n    (data) => QAService.postReply(data._id, data.content),\n    {\n      onSuccess: (data) => {\n        queryClient.setQueryData([\"readMessages\", data.id], data);\n        queryClient.invalidateQueries([\"readMessages\"]);\n      },\n    }\n  );\n  return postReplyMutation;\n}\n//刪除留言or回覆\nexport function useDeleteMsg() {\n  const queryClient = useQueryClient();\n  const deleteMsgMutation = useMutation(\n    (data) => QAService.deleteMessage(data._id),\n    {\n      onSuccess: (data) => {\n        queryClient.invalidateQueries([\"messages\"]);\n      },\n    }\n  );\n  return deleteMsgMutation;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}